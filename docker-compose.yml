services:
  # PostgreSQL Database
  # postgres:
  #   image: postgres:latest
  #   container_name: postgres
  #   restart: always
  #   environment:
  #     POSTGRES_DB: trendshield_db
  #     POSTGRES_USER: app_user
  #     POSTGRES_PASSWORD: app_password
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - ./postgres_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U app_user"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # # PgAdmin for database management (optional)
  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgadmin
  #   restart: always
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@example.com
  #     PGADMIN_DEFAULT_PASSWORD: admin
  #   ports:
  #     - "5050:80"
  #   volumes:
  #     - ./pgadmin_data:/var/lib/pgadmin
  #   depends_on:
  #     - postgres

  # Redis for task queuing
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

  # Django Backend
  backend:
    image: trend_shield-backend:latest
    build:
      context: ./backend
      dockerfile: dockerfile.backend
    container_name: backend
    restart: always
    env_file:
      - ./backend/trendshield_back/.env
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app

  # Celery Worker for async task processing
  worker:
    image: trend_shield-worker:latest
    build:
      context: ./backend
      dockerfile: dockerfile.celery
    container_name: celery_worker
    restart: always
    env_file:
      - ./backend/trendshield_back/.env
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_started
      backend:
        condition: service_started
    volumes:
      - ./backend:/app
    command: celery -A trendshield_back worker --loglevel=info

  # Next.js Frontend
  frontend:
    image: trend_shield-frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    environment:
      NEXT_PUBLIC_BACKEND_URL: "http://backend:8000"
    depends_on:
      - backend
